#!/bin/bash
set -e

# be verbose if $DEBUG=1 is set
if [ ! -z "$DEBUG" ] ; then
  env
  set -x
fi

THIS="$0"
# http://stackoverflow.com/questions/3190818/
args=("$@")
NUMBER_OF_ARGS="$#"

# please do not change $VENDORPREFIX as it will allow for desktop files
# belonging to AppImages to be recognized by future AppImageKit components
# such as desktop integration daemons
VENDORPREFIX=appimagekit

find-up () {
  path="$(dirname "$(readlink -f "${THIS}")")"
  while [[ "$path" != "" && ! -e "$path/$1" ]]; do
    path=${path%/*}
  done
  # echo "$path"
}

if [ -z $APPDIR ] ; then
  # Find the AppDir. It is the directory that contains AppRun.
  # This assumes that this script resides inside the AppDir or a subdirectory.
  # If this script is run inside an AppImage, then the AppImage runtime likely has already set $APPDIR
  APPDIR=$(find-up "AppRun")
fi



export PATH="${APPDIR}/app:${APPDIR}/usr/sbin:${PATH}"
export XDG_DATA_DIRS="./share/:/usr/share/gnome:/usr/local/share/:/usr/share/:${XDG_DATA_DIRS}"
export LD_LIBRARY_PATH="${APPDIR}/usr/lib:${LD_LIBRARY_PATH}"
export XDG_DATA_DIRS="${APPDIR}"/usr/share/:"${XDG_DATA_DIRS}":/usr/share/gnome/:/usr/local/share/:/usr/share/
export GSETTINGS_SCHEMA_DIR="${APPDIR}/usr/share/glib-2.0/schemas:${GSETTINGS_SCHEMA_DIR}"

DESKTOP_FILE="$APPDIR/canoe.desktop"
BIN="$APPDIR/canoe"


trap atexit EXIT

atexit()
{
if [ -z "$APPIMAGE_EXIT_AFTER_INSTALL" ] ; then
  if [ $NUMBER_OF_ARGS -eq 0 ] ; then
    exec "$BIN"
  else
    exec "$BIN" "${args[@]}"
  fi
fi
}

error()
{
  if [ -x /usr/bin/zenity ] ; then
    LD_LIBRARY_PATH="" zenity --error --text "${1}" 2>/dev/null
  elif [ -x /usr/bin/kdialog ] ; then
    LD_LIBRARY_PATH="" kdialog --msgbox "${1}" 2>/dev/null
  elif [ -x /usr/bin/Xdialog ] ; then
    LD_LIBRARY_PATH="" Xdialog --msgbox "${1}" 2>/dev/null
  else
    echo "${1}"
  fi
  exit 1
}

{
continuecancel()
{
  TITLE=$1
  TEXT=$2
  if [ -x /usr/bin/zenity ] ; then
    LD_LIBRARY_PATH="" zenity --question  --text="$TEXT" --ok-label="Install for user only" --cancel-label="Ok, exit here and start Canoe" --width=400  2>/dev/null || exit 0
  elif [ -x /usr/bin/kdialog ] ; then
    LD_LIBRARY_PATH="" kdialog --yesno "$TEXT"  --yes-label="No, install for user only" --no-label="Ok, exit here and start Canoe" || exit 0

  elif [ -x /usr/bin/Xdialog ] ; then
    LD_LIBRARY_PATH="" Xdialog --title "$TITLE"  --msgbox "$TEXT" 10 110 
  else
    echo "zenity, kdialog, Xdialog missing. Skipping ${THIS}."
    exit 0
  fi
}


}
yesno()
{
  TITLE=$1
  TEXT=$2
  if [ -x /usr/bin/zenity ] ; then
    LD_LIBRARY_PATH="" zenity --question --title="$TITLE" --text="$TEXT"  --width=400 2>/dev/null || exit 0
  elif [ -x /usr/bin/kdialog ] ; then
    LD_LIBRARY_PATH="" kdialog --title "$TITLE" --yesno "$TEXT" || exit 0
  elif [ -x /usr/bin/Xdialog ] ; then
    LD_LIBRARY_PATH="" Xdialog --title "$TITLE" --clear --yesno "$TEXT" 10 100 || exit 0
  else
    echo "zenity, kdialog, Xdialog missing. Skipping ${THIS}."
    exit 0
  fi
}

check_prevent()
{
  FILE=$1
  if [ -e "$FILE" ] ; then
    exit 0
  fi
}

# Exit immediately of one of these files is present
# (e.g., because the desktop environment wants to handle desktop integration itself)
check_prevent "$HOME/.local/share/$VENDORPREFIX/no_desktopintegration"
check_prevent "/usr/share/$VENDORPREFIX/no_desktopintegration"
check_prevent "/etc/$VENDORPREFIX/no_desktopintegration"

# Exit immediately if appimaged is running
pidof appimaged 2>/dev/null && exit 0

# Exit immediately if $DESKTOPINTEGRATION is not empty
if [ ! -z "$DESKTOPINTEGRATION" ] ; then
  exit 0
fi

check_dep()
{
  DEP=$1
  if [ -z $(which $DEP) ] ; then
    echo "$DEP is missing. Skipping ${THIS}."
    exit 0
  fi
}

# Check whether dependencies are present in base system (we do not bundle these)
# http://cgit.freedesktop.org/xdg/desktop-file-utils/
check_dep desktop-file-install
check_dep xdg-icon-resource
check_dep xdg-mime
check_dep xdg-desktop-menu

if [ ! -f "$DESKTOP_FILE" ] ; then
  echo "Desktop file is missing. Please run ${THIS} from within an AppImage."
  exit 0
fi

if [ -z "$APPIMAGE" ] ; then
  APPIMAGE="$APPDIR/AppRun"
# Not running from within an AppImage; hence using the AppRun for Exec=
fi



# Determine if system-wide or user installation
if [[ $EUID -ne 0 ]]; then
   DESTINATION_DIR_DESKTOP="$HOME/.local/share/applications"
   MODE="user"
  else
  DESTINATION_DIR_DESKTOP="/usr/share/applications"
# for xdg-mime, xdg-icon-resource and path_to_appimage
   MODE="system"
   CANOE_EXEC="/opt/canoe/$(basename $APPIMAGE)"
fi

APP_VERSION=$(grep "^X-AppImage-BuildId=" "$DESKTOP_FILE" | cut -c 20-24)
# Check if the desktop file is already there and if so check version
# If minor we  ask for upgrading
if [ -e "$DESTINATION_DIR_DESKTOP/$VENDORPREFIX-canoe.desktop" ] ; then
  INSTALLED_APP_VERSION=$(grep "^X-AppImage-BuildId=" "$DESTINATION_DIR_DESKTOP/$VENDORPREFIX-canoe.desktop" |cut -c 20-24)
  APP_VERSION=$(grep "^X-AppImage-BuildId=" "$DESKTOP_FILE" | cut -c 20-24)
  echo "Installed: $INSTALLED_APP_VERSION - New version: $APP_VERSION"
     if [ "$INSTALLED_APP_VERSION" == "$APP_VERSION" ] ; then
    exit 0
    else
                #root check
            if [[ $EUID -ne 0 ]]; then
                  continuecancel "Information" "To install or upgrade Canoe $APP_VERSION system-wide relaunch the Canoe AppImage with root permissions.\n\n To upgrade for current user continue."
                  yesno "Upgrade" "Would you like to upgrade Canoe $INSTALLED_APP_VERSION to Canoe $APP_VERSION?"
                  desktop-file-install --rebuild-mime-info-cache \
                --vendor=$VENDORPREFIX --set-key=Exec --set-value="\"${APPIMAGE}\" %U" \
                --set-key=X-AppImage-BuildId --set-value="${APP_VERSION}" \
                --set-key=X-AppImage-Comment --set-value="Generated by ${THIS}" \
                --set-icon="canoe" --set-key=TryExec --set-value=${APPIMAGE// /\\s} "$DESKTOP_FILE" \
                --dir "$DESTINATION_DIR_DESKTOP" \
                --mode=644
 
                  exit 0
                  
            else
              
                  yesno "Upgrade" "Would you like to upgrade Canoe $INSTALLED_APP_VERSION to Canoe $APP_VERSION?"
                  desktop-file-install --rebuild-mime-info-cache \
                --vendor=$VENDORPREFIX --set-key=Exec --set-value="\"${CANOE_EXEC}\" %U" \
                --set-key=X-AppImage-BuildId --set-value="${APP_VERSION}" \
                --set-key=X-AppImage-Comment --set-value="Generated by ${THIS}" \
                --set-icon="canoe" --set-key=TryExec --set-value=${APPIMAGE// /\\s} "$DESKTOP_FILE" \
                --dir "$DESTINATION_DIR_DESKTOP" \
                --mode=644
                  
                  exit 0
              
              
            fi
       
  fi
fi



# we ask the user only if we have found no reason to skip until here
if [ -z "$APPIMAGE_SILENT_INSTALL" ] ; then
  yesno "Install"  "Would you like to add Canoe $APP_VERSION to your Applications menu?\n\nIf you don't do this, you can still launch the application by double-clicking on the AppImage."
fi

#root check
if [[ $EUID -ne 0 ]]; then
    continuecancel "Information" "To install or upgrade Canoe $APP_VERSION system-wide relaunch the Canoe AppImage with root permissions."
    desktop-file-install --rebuild-mime-info-cache \
  --vendor=$VENDORPREFIX --set-key=Exec --set-value="\"${APPIMAGE}\" %U" \
  --set-key=X-AppImage-BuildId --set-value="${APP_VERSION}" \
  --set-key=X-AppImage-Comment --set-value="Generated by ${THIS}" \
  --set-icon="canoe" --set-key=TryExec --set-value=${APPIMAGE// /\\s} "$DESKTOP_FILE" \
  --dir "$DESTINATION_DIR_DESKTOP" \
  --mode=644
    xdg-icon-resource install --mode $MODE --novendor --context apps --size 64 "$APPDIR/canoe.png"  "canoe"
    xdg-icon-resource install --mode $MODE --novendor --context apps --size 128 "$APPDIR/canoe.png"  "canoe"
    exit 0
else
    mkdir -p /opt/canoe/
    cp ${APPIMAGE} /opt/canoe/
    desktop-file-install --rebuild-mime-info-cache \
  --vendor=$VENDORPREFIX --set-key=Exec --set-value="\"${CANOE_EXEC}\" %U" \
  --set-key=X-AppImage-BuildId --set-value="${APP_VERSION}" \
  --set-key=X-AppImage-Comment --set-value="Generated by ${THIS}" \
  --set-icon="canoe" --set-key=TryExec --set-value=${CANOE_EXEC// /\\s} "$DESKTOP_FILE" \
  --dir "$DESTINATION_DIR_DESKTOP" \
  --mode=644
    xdg-icon-resource install --mode $MODE --novendor --context apps --size 64 "$APPDIR/canoe.png"  "canoe"
    xdg-icon-resource install --mode $MODE --novendor --context apps --size 128 "$APPDIR/canoe.png"  "canoe"
   
fi
 
# eventually uninstall previous icons

#xdg-icon-resource uninstall --noupdate --size 64 "appimagekit-canoe"
#xdg-icon-resource uninstall --noupdate --size 128 "appimagekit-canoe"

xdg-icon-resource forceupdate
gtk-update-icon-cache
